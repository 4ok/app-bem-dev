#!/usr/bin/env bash

########################################################
###                        Help                      ###
########################################################

HELP='
Build.

Usage:

    build [action]

Parameters:

    * action

        Build action.

        - create   Create a build.
        - remove   Remove a build.
'

########################################################
###                     Variables                    ###
########################################################

# Node environment
if [[ -z $NODE_ENV ]]; then
    NODE_ENV='production'
fi

# Build name
if [[ -z $BUILD_NAME ]]; then
    BUILD_NAME='build'
fi

# Node
NODE='node'

# Node modules directory
NODE_MODULES_DIR='node_modules'

# Node modules binary directory
NODE_MODULES_BIN_DIR="$NODE_MODULES_DIR/.bin"

# Scripts directory
SCRIPTS_DIR="$NODE_MODULES_DIR/app-bem-dev/tools/scripts"

# Shared scripts directory
SHARED_SCRIPTS_DIR="$SCRIPTS_DIR/shared"

# Module script
SCRIPT_MODULE="$SHARED_SCRIPTS_DIR/module"

# Script for replacing vars
SCRIPT_REPLACE_VARS="$SHARED_SCRIPTS_DIR/replace-vars.js"

# Configs directory
CONFIGS_RELATIVE_DIR='configs'

# Public directory
PUBLIC_RELATIVE_DIR='public'

# Build directory
BUILD_RELATIVE_DIR="$BUILD_NAME"

# Build archive
BUILD_RELATIVE_ARCHIVE="$BUILD_RELATIVE_DIR.tgz"

# Images suffixes for optimize
OPTIMIZE_IMAGES_SUFFIXES='jpg|jpeg|png|gif|svg'

########################################################
###                      Export                      ###
########################################################

# Gzip compress level
export GZIP=-9

# Node config directory
export NODE_CONFIG_DIR=./"$CONFIGS_RELATIVE_DIR/node"

########################################################
###                      Helpers                     ###
########################################################

#
# Print a title of action
#
# @1 {string} Title
#
printTitle() {
    echo "===> $1"
}

#
# Create a build dir
#
createBuildDir() {
    printTitle 'Creating a build directory'

    mkdir -p "$BUILD_RELATIVE_DIR"
}

#
# Copy files
#
copyFiles() {
    local bemRelativeDir='bem'
    local bemLinksRelativeFile="$bemRelativeDir/links.json"
    local configNodeRelativeDir="$CONFIGS_RELATIVE_DIR/node"
    local bundleName='index'
    local bundleRelativeDir="$bemRelativeDir/bundles/$bundleName"

    printTitle 'Copying bem files'

    mkdir -p "$BUILD_RELATIVE_DIR/$bundleRelativeDir"
    cp "$bundleRelativeDir/$bundleName.bemtree.min.js" "$BUILD_RELATIVE_DIR/$bundleRelativeDir"
    cp "$bundleRelativeDir/$bundleName.bemhtml.min.js" "$BUILD_RELATIVE_DIR/$bundleRelativeDir"

    cp "$bemLinksRelativeFile" "$BUILD_RELATIVE_DIR/$bemLinksRelativeFile"

    printTitle 'Copying application files'

    cp index.js "$BUILD_RELATIVE_DIR"

    cp -r app "$BUILD_RELATIVE_DIR"

    if [[ -d data ]]; then
        cp -r data "$BUILD_RELATIVE_DIR"
    fi

    mkdir -p "$BUILD_RELATIVE_DIR/$configNodeRelativeDir"
    cp "$configNodeRelativeDir/default"*'.js' "$BUILD_RELATIVE_DIR/$configNodeRelativeDir"
    cp "$configNodeRelativeDir/$NODE_ENV"*.'js' "$BUILD_RELATIVE_DIR/$configNodeRelativeDir"

    printTitle 'Copying not images files'

    find "$PUBLIC_RELATIVE_DIR" -type f ! -name '.*' \
        | grep -Ev "/.+\.($OPTIMIZE_IMAGES_SUFFIXES)$" \
        | xargs -I '{}' rsync -R '{}' "$BUILD_RELATIVE_DIR"
}

#
# Optimize and copy images
#
optimizeAndCopyImages() {
    printTitle 'Optimizing and copying images'

    printImagesList "$PUBLIC_RELATIVE_DIR" \
        | tr ' ' '\n' \
        | xargs -I '{}' dirname {} \
        | uniq \
        | xargs -P 5 -I '{}' \
        "$NODE_MODULES_BIN_DIR/imagemin" '{}/*' \
            --plugin mozjpeg \
            --plugin pngquant \
            --plugin gifsicle \
            --plugin svgo \
            --out-dir "$BUILD_RELATIVE_DIR/{}" \
            > /dev/null
}

#
# Imaget list
#
# @1 {string} Directory
#
printImagesList() {
    echo $(find $1 -type f | grep -E "\.($OPTIMIZE_IMAGES_SUFFIXES)")
}

#
# Print optimize images result
#
printOptimizeImagesResult() {
    local imagesSizeBefore=$(printTotalSize "$PUBLIC_RELATIVE_DIR")
    local imagesSizeAfter=$(printTotalSize "$BUILD_RELATIVE_DIR/$PUBLIC_RELATIVE_DIR")
    local imagesSizeDifference=$(echo "$imagesSizeBefore - $imagesSizeAfter" | bc)
    local imagesSizePercentDifference=$(echo "$imagesSizeDifference * 100 / $imagesSizeBefore" | bc | xargs -I '{}' echo '{}%%')

    printSizeInMb "$imagesSizeBefore" 'Before'
    printSizeInMb "$imagesSizeAfter" 'After'
    printSizeInMb "$imagesSizeDifference" 'Difference' " ($imagesSizePercentDifference)"
}

#
# Total files size in KB
#
# @1 {string} Directory
#
printTotalSize() {
    echo $(printImagesList $1 | xargs du -c | tail -1 | awk '{print $1}')
}

#
# Convert KB to MB and add title
#
# @1 {number} Size in KB
# @2 {string} Title
# @3 {string} Epilog
#
printSizeInMb() {
    echo "$1 / 1024" | bc -l | xargs printf "$2: %.2f MB$3\n"
}

#
# Gzip texts files
#
gzipTextsFiles() {
    local compressFilesSuffixes='css|js|eot|svg|ttf|woff|pdf|xml|txt'

    printTitle 'Gziping texts files'

    find "$BUILD_RELATIVE_DIR/$PUBLIC_RELATIVE_DIR" \
        | grep -E "\.($compressFilesSuffixes)" \
        | xargs gzip -kv "$GZIP"
}

#
# Install modules
#
installModules() {
    printTitle 'Copying installation instructions files'

    cp package.json "$BUILD_RELATIVE_DIR"

    "$SCRIPT_MODULE" npm install --prefix="$BUILD_RELATIVE_DIR" --no-package-lock

    printTitle 'Removing installation instructions files'

    rm -rf "$BUILD_RELATIVE_DIR/etc"
    rm -f "$BUILD_RELATIVE_DIR/package.json"
}

#
# Create a nginx config
#
createNginxConfig() {
    local nginxRelativeDir='nginx'
    local configNginxDir="$CONFIGS_RELATIVE_DIR"/"$nginxRelativeDir"
    local configNginxIncludesDir="$configNginxDir"/includes
    local buildConfigNginxDir="$BUILD_RELATIVE_DIR"/"$CONFIGS_RELATIVE_DIR"/"$nginxRelativeDir"
    local buildConfigNginxIncludesDir="$buildConfigNginxDir"/includes

    printTitle 'Creating a nginx config'

    mkdir -p "$buildConfigNginxDir"

    NODE_ENV=production "$NODE" "$SCRIPT_REPLACE_VARS" \
        "$NODE_MODULES_DIR/app-core-dev/configs/nginx/default.conf" \
        "$configNginxDir/default-vars.js" \
        > "$buildConfigNginxDir/nginx.conf"

    if [[ -d $configNginxIncludesDir ]]; then
        printTitle 'Copying nginx includes'

        mkdir -p "$buildConfigNginxIncludesDir"
        cp "$configNginxIncludesDir"/* "$buildConfigNginxIncludesDir"
    fi
}

#
# Create a build archive
#
createArchive() {

    printTitle 'Creating a build archive'
    tar -czf "$BUILD_RELATIVE_ARCHIVE" "$BUILD_RELATIVE_DIR"
}

########################################################
###                      Actions                     ###
########################################################

#
# Help
#
help() {
    echo "$HELP"
}

#
# Create a build
#
create() {
    remove
    createBuildDir
    copyFiles
    optimizeAndCopyImages
    printOptimizeImagesResult
    gzipTextsFiles
    installModules
    createNginxConfig
    createArchive
}

#
# Remove a build
#
remove() {
    printTitle 'Removing a build directory'

    rm -rf "$BUILD_RELATIVE_DIR" "$BUILD_RELATIVE_ARCHIVE"
}

########################################################
###                    Call action                   ###
########################################################

case $1 in
    create|remove)
        $1
    ;;
    *)
        help
    ;;
esac
