##### SETTINGS #####

# Gzip compress level
export GZIP=-9

# Mongo gost
MONGO_HOST = 127.0.0.1

# Build directory
BUILD_DIR := ./build

# Public directory
PUBLIC_DIR := ./public

# Build file
BUILD_FILE = ./build.tar.gz

# Files suffixes for compress
COMPRESS_SUFFIXES = css|js|eot|svg|ttf|woff|pdf|xml|txt

# Images suffixes for optimize
OPTIMIZE_IMAGES = jpg,jpeg,png,gif,svg

# Remote build name
REMOTE_BUILD_NAME = $(PROJECT_NAME)-$(shell date +%s)

# Remote build file name
REMOTE_BUILD_FILENAME = $(REMOTE_BUILD_NAME).tar.gz

# Remote www root
REMOTE_WWW_ROOT := /var/www

# Remote builds dir
REMOTE_BUILDS_DIR = $(REMOTE_WWW_ROOT)/builds

# Remote projects dir
REMOTE_PROJECTS_DIR = $(REMOTE_WWW_ROOT)/projects

# Remote backups dir
REMOTE_BACKUPS_DIR = $(REMOTE_WWW_ROOT)/backups

# Remote build file
REMOTE_BUILD_FILE = $(REMOTE_BUILDS_DIR)/$(REMOTE_BUILD_FILENAME)

# Remote build dir
REMOTE_BUILD_DIR = $(REMOTE_BUILDS_DIR)/$(REMOTE_BUILD_NAME)

# Remote project dir
REMOTE_PROJECT_DIR = $(REMOTE_PROJECTS_DIR)/$(PROJECT_NAME)

# Remote backup file
REMOTE_BACKUP_FILE = $(REMOTE_BACKUPS_DIR)/$(REMOTE_BUILD_NAME)

##### RULES #####

.PHONY: build
build: export NODE_ENV=production
build: build.copy build.gzip-public build.dump

.PHONY: build.copy
build.copy: build.copy.bem build.copy.app build.copy.makefile build.copy.install-files \
            build.copy.public-optimize-images build.copy.public-files

.PHONY: build.copy.bem
build.copy.bem: bem
	@echo '===> Coping bem files'

	rm -rf $(BUILD_DIR)
	mkdir $(BUILD_DIR)

	mkdir -p $(BUILD_DIR)/bem/bundles/index
	cp bem/bundles/index/index.bemtree.min.js $(BUILD_DIR)/bem/bundles/index
	cp bem/bundles/index/index.bemhtml.min.js $(BUILD_DIR)/bem/bundles/index

	cp $(BEM_PATH)/links.json $(BUILD_DIR)/bem/links.json

.PHONY: build.copy.app
build.copy.app:
	@echo '===> Coping application files'

	cp index.js $(BUILD_DIR)

	cp -r routes $(BUILD_DIR)
	cp -r src $(BUILD_DIR)

	mkdir -p $(BUILD_DIR)/configs/app
	cp configs/app/default.js $(BUILD_DIR)/configs/app
	cp configs/app/default-0.js $(BUILD_DIR)/configs/app
	cp configs/app/production.js $(BUILD_DIR)/configs/app
	cp configs/app/production-0.js $(BUILD_DIR)/configs/app

.PHONY: build.copy.makefile
build.copy.makefile:
	@echo '===> Coping makefile'

	mkdir $(BUILD_DIR)/makefiles
	find makefiles -type f -d 1 -exec cp {} $(BUILD_DIR)/makefiles \;
	cp makefiles/env/$(NODE_ENV) $(BUILD_DIR)/Makefile

.PHONY: build.copy.install-files
build.copy.install-files:
	@echo '===> Coping install files'

	cp bower.json $(BUILD_DIR)
	cp .bowerrc $(BUILD_DIR)
	cp package.json $(BUILD_DIR)

.PHONY: build.copy.public-optimize-images
build.copy.public-optimize-images:
	@echo '===> Optimizing and coping public images'

	find $(PUBLIC_DIR) -type d \
	    -exec $(NODE_MODULES_BIN_PATH)/imagemin {}/*.{$(OPTIMIZE_IMAGES)} \
	    -p mozjpeg -p pngquant -p gifsicle -p svgo \
	    -o $(BUILD_DIR)/{} \;

.PHONY: build.copy.public-files
build.copy.public-files:
	@echo '===> Coping not images files'

	find $(PUBLIC_DIR) -type f ! -name '.*' \
	    | grep -Ev '/.+\.(jpg|jpeg|png|gif|svg)$$' \
	    | xargs -I {} rsync -R {} $(BUILD_DIR)/

.PHONY: build.gzip-public
build.gzip-public:
	@echo '===> Gziping public files'

	find $(BUILD_DIR)/public \
	    | grep -E '\.($(COMPRESS_SUFFIXES))' \
	    | xargs gzip -kv9

.PHONY: build.dump
build.dump:
	@echo '===> Dumping database'

	mongodump -h $(MONGO_HOST) -d $(PROJECT_NAME) -o $(BUILD_DIR)/dump

.PHONY: deploy
deploy: deploy.copy

.PHONY: deploy.copy
deploy.copy:
	@echo '===> Deploying build files'

	tar -zcf $(BUILD_FILE) $(BUILD_DIR)
	scp $(BUILD_FILE) fast-vps:$(REMOTE_BUILD_FILE)

	ssh fast-vps ' \
	    mkdir $(REMOTE_BUILD_DIR) \
        && tar -C $(REMOTE_BUILD_DIR) --strip-components 1 \
            -zxf $(REMOTE_BUILD_FILE) 2>/dev/null \
        && cd $(REMOTE_BUILD_DIR)/build \
        && npm install \
        && bower install --allow-root \
        && if [ -d $(REMOTE_PROJECT_DIR) ]; then \
            mv $(REMOTE_PROJECT_DIR) $(REMOTE_BACKUP_FILE) \
            && rm -rf $(REMOTE_PROJECT_DIR); \
        fi \
        && mv $(REMOTE_BUILD_DIR)/build $(REMOTE_PROJECT_DIR) \
	    '
